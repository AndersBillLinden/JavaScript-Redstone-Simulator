{"ts":1370048973345,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"(function(){\n\tvar namespace = com.mordritch.mcSim;\n\tvar funcName = \"BlockType__Default\";\n\t\n\tnamespace[funcName] = function() {};\n\tvar proto = namespace[funcName].prototype;\n\n\tproto.material = \"\";\n\t\n\t/**\n\t * Manually called just after \"new\" keyword is used to instantiate the object \n\t * \n\t * Because Javascript doesn't have true class inheritance, there is no \"constructor\" function,\n\t * instead, this is called manually to complete initiation of the instantiated block type.\n\t * \n\t * @param {Object}\tblockType \n\t */\n\tproto._construct = function(blockType, blockID, blockDefinition, Block) {\n\t\tthis.facing = new com.mordritch.mcSim.facing(); //A collection direction maps TODO: consider having this reside in the Block object, more relevant there\n\t\tthis.drawIconBlockMetadataOveride = 0; //Used by the drawicon function, if we don't want block icons to be generated for Metadata 0, we can override it per block by setting up this value \n\t\t\n\t\tthis.blockType = blockType;\n\t\tthis.blockID = blockID;\n\t\tthis.blockName = blockDefinition.blockName;\n\t\tthis.className = blockDefinition.blockName;\n\t\t\n\t\tthis.tickOnLoad = false;\n\t\tthis._renderAsNormalBlock = true;\n\t\t\n\t\tif (typeof blockDefinition.material != \"undefined\") {\n\t\t\tthis.setBlockMaterial(blockDefinition.material);\n\t\t}\n\t\telse if (typeof this.material != \"undefined\") {\n\t\t\tthis.setBlockMaterial(this.material);\n\t\t}\n\t\t\n\t\tthis.construct(blockType, blockID, blockDefinition, Block);\n\t}\n\t\n\tproto.setBlockMaterial = function(material) {\n\t\tthis.blockMaterial = namespace.Material[material];\n\t}\n\t\n\tproto.renderAsNormalBlock = function() {\n\t\treturn this._renderAsNormalBlock;\n\t}\n\t\n\t/**\n\t * When one is inspecting block info, blocks can choose to show extra data here. \n\t */\n\tproto.getBlockInfo = function(world, posX, posY, posZ) {\n\t\treturn \"No extra block info provided.\";\n\t}\n\t\n\t/**\n\t * Block specific constructor, can be implemented by inherited blocks, called automatically by\n\t * this._construct();\n\t */\n\tproto.construct = function() {\n\t\t\n\t}\n\t\n\t/**\n\t * Used to rotate the entire world or a selection of blocks, torches for example can have their metadata updated appropriately\n\t * \n\t * Accepts amount of times to rotate the block 90 degrees clockwise, so, to rotate it 180 degress clockwise, the amount would be 2, 270 would be 3\n\t * \n\t * Returns updated block metadata for the new rotation\n\t */\n\tproto.rotateSelection = function(blockMetadata, amount) {\n\t\treturn blockMetadata;\n\t}\n\t\n\t/**\n\t * Is the block solid?\n\t * \n\t * @param {Object}\tworld\tThe \"world\" which has the block\n\t * @param {Integer} posX\tCoordinate of the block to check\n\t * @param {Integer} posY\tCoordinate of the block to check\n\t * @param {Integer} posZ\tCoordinate of the block to check\n\t * \n\t * @param {Integer} a\t\tUnknown paramater from minecraft source\n\t * \n\t * @return {Boolean}\n\t */\n\tproto.getIsBlockSolid = function(world, posX, posY, posZ) {\n\t\treturn this.isSolid;\n\t}\n\t\n\t/**\n\t * Called when a block has been queued to update at a cetain tick\n\t * \n\t * @param {Object}\tworld\tThe \"world\" which has the block\n\t * @param {Integer} posX\tCoordinate of the block to check\n\t * @param {Integer} posY\tCoordinate of the block to check\n\t * @param {Integer} posZ\tCoordinate of the block to check\n\t * \n\t * @param {Integer} a\t\tUnknown paramater from minecraft source\n\t * \n\t */\n\tproto.updateTick = function(world, posX, posY, posZ) {\n\t\t\n\t}\n\t\n\t/**\n\t * Called when the block is destroyed by a player\n\t * \n\t * @param {Object}\tworld\tThe \"world\" which has the block\n\t * @param {Integer} posX\tCoordinate of the block to check\n\t * @param {Integer} posY\tCoordinate of the block to check\n\t * @param {Integer} posZ\tCoordinate of the block to check\n\t * \n\t * @param {Integer} a\t\tUnknown paramater from minecraft source\n\t * \n\t */\n\tproto.onBlockDestroyedByPlayer = function(world, posX, posY, posZ) {\n\t\n\t}\n\t\n\t/**\n\t * Called when the block is destroyed by a player\n\t * \n\t * @param {Object}\tworld\tThe \"world\" which has the block\n\t * @param {Integer} posX\tCoordinate of the block to check\n\t * @param {Integer} posY\tCoordinate of the block to check\n\t * @param {Integer} posZ\tCoordinate of the block to check\n\t * \n\t * @param {Integer} blockID\tThe block ID which triggered the event \n\t * \n\t */\n\tproto.onNeighborBlockChange = function(world, posX, posY, posZ, blockID) {\n\t\t\n\t}\n\t\n\t/**\n\t * Called when \"block is added to the world\"?\n\t * \n\t * I am assuming it's called when for example sand falls, pistons put down their moved blocks\n\t * \n\t * @param {Object}\tworld\tThe \"world\" which has the block\n\t * @param {Integer} posX\tCoordinate of the block to check\n\t * @param {Integer} posY\tCoordinate of the block to check\n\t * @param {Integer} posZ\tCoordinate of the block to check\n\t * \n\t */\n\tproto.onBlockAdded = function(world, posX, posY, posZ) {\n\t\t\n\t}\n\t\n\t/**\n\t * Checks to see if its valid to put this block at the specified coordinates\n\t * \n\t * @param {Object}\tworld\tThe \"world\" which has the block\n\t * @param {Integer} posX\tCoordinate of the block to check\n\t * @param {Integer} posY\tCoordinate of the block to check\n\t * @param {Integer} posZ\tCoordinate of the block to check\n\t * \n\t */\n\tproto.canPlaceBlockAt = function(world, posX, posY, posZ) {\n        var blocksList = world.Block.blocksList;\n        \n        var blockId = world.getBlockId(posX, posY, posZ);\n        return blockId == 0 || blocksList[blockId].blockMaterial.isGroundCover();\n\t}\n\t\n\t/**\n\t * Used by the place block tool as an additional way to compare if block types match for purposes of rotating\n\t * the block. For example, signs use this to compare wall signs and sign posts as a match even though their IDs\n\t * are different.  \n\t */\n\tproto.sameBlockTypeAs = function(blockId) {\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Called when block is removed from the world, but not when destroyed by player\n\t * \n\t * @param {Object}\tworld\tThe \"world\" which has the block\n\t * @param {Integer} posX\tCoordinate of the block to check\n\t * @param {Integer} posY\tCoordinate of the block to check\n\t * @param {Integer} posZ\tCoordinate of the block to check\n\t * \n\t * @param {Integer} a\t\tUnknown paramater from minecraft source\n\t * \n\t */\n\tproto.onBlockRemoval = function(world, posX, posY, posZ) {\n\t\n\t}\n\t\n\t/**\n\t * I am guessing it's a check to see if we can place the block on the specified side of\n\t * the specified block.\n\t * \n\t * @param {Object}\tworld\tThe \"world\" which has the block\n\t * @param {Integer} posX\tCoordinate of the block to check\n\t * @param {Integer} posY\tCoordinate of the block to check\n\t * @param {Integer} posZ\tCoordinate of the block to check\n\t * \n\t * @param {Integer} side\tUnknown paramater from minecraft source, guessing it's which side of the block\n\t * \t\t\t\t\t\t\twe are going to test?\n\t * \n\t * @return {Boolean}\n\t */\n\tproto.canPlaceBlockOnSide = function(world, posX, posY, posZ, side) {\n\t\treturn this.canPlaceBlockAt(world, posX, posY, posZ);\n\t}\n\t\n\t/**\n\t * Can the block be placed at the following co-ordinates, certain blocks can't rest on nothing, so\n\t * I guess this is a check for that.\n\t * \n\t * @param {Object}\tworld\tThe \"world\" which has the block\n\t * @param {Integer} posX\tCoordinate of the block to check\n\t * @param {Integer} posY\tCoordinate of the block to check\n\t * @param {Integer} posZ\tCoordinate of the block to check\n\t * \n\t * @return {Boolean}\n\t */\n\tproto.canPlaceBlockAt = function(world, posX, posY, posZ) {\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Event called when a player right clicks the block.\n\t * \n\t * @param {Object}\tworld\tThe \"world\" which has the block\n\t * @param {Integer} posX\tCoordinate of the block to check\n\t * @param {Integer} posY\tCoordinate of the block to check\n\t * @param {Integer} posZ\tCoordinate of the block to check\n\t * \n\t */\n\tproto.blockActivated = function(world, posX, posY, posZ) {\n\t\t\n\t}\n\t\n\t/**\n\t * Event called when a block is placed by a player into the world\n\t * \n\t * @param {Object}\tworld\tThe \"world\" which has the block\n\t * @param {Integer} posX\tCoordinate of the block to check\n\t * @param {Integer} posY\tCoordinate of the block to check\n\t * @param {Integer} posZ\tCoordinate of the block to check\n\t * \n\t */\n\tproto.onBlockPlaced = function(world, posX, posY, posZ, facing) {\n\t\t\n\t}\n\t\n\t/**\n\t * Event called when a block is placed by a player into the world\n\t * \n\t * @param {Object}\tworld\tThe \"world\" which has the block\n\t * @param {Integer} posX\tCoordinate of the block to check\n\t * @param {Integer} posY\tCoordinate of the block to check\n\t * @param {Integer} posZ\tCoordinate of the block to check\n\t * @param {Integer}\ta\t\tunknown parameter, is it for which side of the block we are checking?\n\t * \n\t * @return {Boolean}\n\t */\n\tproto.isPoweringTo = function(world, posX, posY, posZ) {\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Can provide power\n\t * \n\t * Perhaps affects whether or not wires will connect with it?\n\t * \n\t * @param {Object}\tworld\tThe \"world\" which has the block\n\t * @param {Integer} posX\tCoordinate of the block to check\n\t * @param {Integer} posY\tCoordinate of the block to check\n\t * @param {Integer} posZ\tCoordinate of the block to check\n\t * @return {Boolean}\n\t */\n\tproto.canProvidePower = function(world, posX, posY, posZ) {\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Event called when a block is placed by a player into the world\n\t * \n\t * @param {Object}\tworld\tThe \"world\" which has the block\n\t * @param {Integer} posX\tCoordinate of the block to check\n\t * @param {Integer} posY\tCoordinate of the block to check\n\t * @param {Integer} posZ\tCoordinate of the block to check\n\t * @param {Integer}\ta\t\tunknown parameter, is it for which side of the block we are checking?\n\t * \n\t * @return {Boolean}\n\t */\n\tproto.isIndirectlyPoweringTo = function(world, posX, posY, posZ) {\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Unknown functionality\n\t * \n\t * Guessing it's for blocks like torch which need to fall to the ground if the block they are attached to is\n\t * removed.\n\t * \n\t * @param {Object}\tworld\tThe \"world\" which has the block\n\t * @param {Integer} posX\tCoordinate of the block to check\n\t * @param {Integer} posY\tCoordinate of the block to check\n\t * @param {Integer} posZ\tCoordinate of the block to check\n\t * @param {Integer}\ta\t\tunknown parameter, is it for which side of the block we are checking?\n\t * \n\t * @return {Boolean}\n\t */\n\tproto.canBlockStay = function(world, posX, posY, posZ) {\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Seems to be implemented by music blocks and pistons\n\t * \n\t * Note sure what triggers it's call exactly though.\n\t * \n\t * @param {Object}\tworld\tThe \"world\" which has the block\n\t * @param {Integer} posX\tCoordinate of the block to check\n\t * @param {Integer} posY\tCoordinate of the block to check\n\t * @param {Integer} posZ\tCoordinate of the block to check\n\t * @param {Integer}\tu1\t\tunknown parameter from MCP generated sourcecode \n\t * @param {Integer}\tu2\t\tunknown parameter from MCP generated sourcecode\n\t * \n\t */\n\tproto.playBlock = function(world, posX, posY, posZ) {\n\t\t\n\t}\n\t\n\tproto.drawSideView_currentLayer = function(world, posX, posY, posZ, canvas, worldFacing) {\n\t\tif (world.isBlockNormalCube(posX, posY, posZ)) {\n\t\t\tthis.drawNormalCube_currentLayer(world, posX, posY, posZ, canvas);\n\t\t\treturn;\n\t\t}\n\n\t\tvar fillColour = \"rgb(255,0,0)\";\n\t\tvar fontColour = \"rgb(255,255,255)\";\n\t\n\t\tcanvas.fillStyle = fillColour;\n\t\tcanvas.fillRect(0,0,8,8);\n\t\t\n\t\tcanvas.fillStyle  = fontColour;\n\t\tcanvas.textBaseline = \"middle\";\n\t\tcanvas.textAlign = \"center\";\n\t\tcanvas.font = \"bold \" + (8) + \"px arial\";\n\t\tcanvas.fillText(this.blockID, 4, 4, 6);\n\t}\n\t\n\tproto.drawSideView_aboveLayer = function(world, posX, posY, posZ, canvas, worldFacing) {\n\t\tif (world.isBlockNormalCube(posX, posY, posZ)) {\n\t\t\tcanvas.fillStyle = \"rgba(128,128,128,0.5)\";\n\t\t\tcanvas.fillRect(0, 0, 8, 8);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t//TODO: Handle not implemented?\n\t}\n\t\n\tproto.drawTopView_currentLayer = function(world, posX, posY, posZ, canvas) {\n\t\tif (world.isBlockNormalCube(posX, posY, posZ)) {\n\t\t\tthis.drawNormalCube_currentLayer(world, posX, posY, posZ, canvas);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t//Draws a green circle with a question mark inside, signifies that the child block does not have\n\t\t//a drawTopView_currentLayer implemented.\n\t\tvar circleColour = \"rgb(0,255,0)\";\n\t\tvar fontColour = \"rgb(0,0,0)\";\n\t\t\n\t\tcanvas.fillStyle = circleColour;\n\t\tcanvas.beginPath();\n\t\tcanvas.arc(4, 4, 4, 0, (Math.PI/180)*360, false);\n\t\tcanvas.fill();\n\t\t\n\t\tcanvas.fillStyle  = fontColour;\n\t\tcanvas.textBaseline = \"middle\";\n\t\tcanvas.textAlign = \"center\";\n\t\tcanvas.font = \"bold \" + (8) + \"px arial\";\n\t\tcanvas.fillText(\"?\", 4, 4, 6);\n\t}\n\t\n\tproto.drawTopView_aboveLayer = function(world, posX, posY, posZ, canvas) {\n\t\tif (world.isBlockNormalCube(posX, posY, posZ)) {\n\t\t\tcanvas.fillStyle = \"rgba(128,128,128,0.5)\";\n\t\t\tcanvas.fillRect(0, 0, 8, 8);\n\t\t\treturn;\n\t\t}\n\n\t\t//TODO: Handle not implemented?\n\t}\n\t\n\tproto.getNormalCubeColour = function() {\n\t\treturn [255,255,0];\n\t} \n\t\n\tproto.getNormalCubeColourByMetadata = function() {\n\t\treturn [255,255,0];\n\t}\n\t\n\tproto.drawNormalCube_currentLayer = function(world, posX, posY, posZ, canvas, shadowed) {\n\t\tvar rgbColour = this.getNormalCubeColour(world, posX, posY, posZ);\n\t\tvar rgbShadow = [128,128,128];\n\t\tvar alpha = 0.5;\n\t\tif (shadowed) {\n\t\t\tfor (var i=0; i<3; i++) {\n\t\t\t\trgbColour[i] = (alpha * rgbShadow[i] + (1 - alpha) * rgbColour[i]) | 0; //http://stackoverflow.com/questions/746899/how-to-calculate-an-rgb-colour-by-specifying-an-alpha-blending-amount\n\t\t\t}\n\t\t}\n\t\tcanvas.fillStyle = \"rgb(\"+rgbColour[0]+\",\"+rgbColour[1]+\",\"+rgbColour[2]+\")\";\n\t\tcanvas.fillRect(0, 0, 8, 8);\n\t}\n\t\n\tproto.drawNormalCube_withOpacity = function(world, posX, posY, posZ, canvas, alpha, shadowed) {\n\t\tvar rgbColour = this.getNormalCubeColour(world, posX, posY, posZ);\n\t\tvar rgbFog = [255,255,255];\n\t\tfor (var i=0; i<3; i++) {\n\t\t\trgbColour[i] = (alpha * rgbFog[i] + (1 - alpha) * rgbColour[i]) | 0; //http://stackoverflow.com/questions/746899/how-to-calculate-an-rgb-colour-by-specifying-an-alpha-blending-amount\n\t\t}\n\t\tcanvas.fillStyle = \"rgb(\"+rgbColour[0]+\",\"+rgbColour[1]+\",\"+rgbColour[2]+\")\";\n\t\tcanvas.fillRect(0, 0, 8, 8);\n\t}\n\t\n\tproto.drawTopView_moving = function(world, posX, posY, posZ, canvas, entity, forAboveLayer) {\n\t\tif (forAboveLayer) {\n\t\t\tcanvas.fillStyle = \"rgba(128,128,128,0.5)\";\n\t\t}\n\t\telse {\n\t\t\tvar rgbColour = this.getNormalCubeColourByMetadata(entity.storedMetadata);\n\t\t\tcanvas.fillStyle = \"rgb(\"+rgbColour[0]+\",\"+rgbColour[1]+\",\"+rgbColour[2]+\")\";\n\t\t}\n\t\tcanvas.fillRect(0, 0, 8, 8);\n\t}\n\t\n\tproto.drawSideView_moving = function(world, posX, posY, posZ, canvas, entity, forAboveLayer) {\n\t\tif (forAboveLayer) {\n\t\t\tcanvas.fillStyle = \"rgba(128,128,128,0.5)\";\n\t\t}\n\t\telse {\n\t\t\tvar rgbColour = this.getNormalCubeColourByMetadata(entity.storedMetadata);\n\t\t\tcanvas.fillStyle = \"rgb(\"+rgbColour[0]+\",\"+rgbColour[1]+\",\"+rgbColour[2]+\")\";\n\t\t}\n\t\tcanvas.fillRect(0, 0, 8, 8);\n\t}\n\t\n\t/**\n\t * Called by \"toggle\" tool of the simulator, not implemented in the game.\n\t * \n\t * @param {Object}\tworld\tThe \"world\" which has the block\n\t * @param {Integer} posX\tCoordinate of the block to check\n\t * @param {Integer} posY\tCoordinate of the block to check\n\t * @param {Integer} posZ\tCoordinate of the block to check\n\t */\n\tproto.toggleBlock = function(world, posX, posY, posZ) {\n\t\t\n\t}\n\t\n\t/**\n\t * Used to called by \"rotate\" tool of the simulator, not implemented in the game.\n\t * \n\t * @param {Object}\tworld\tThe \"world\" which has the block\n\t * @param {Integer} posX\tCoordinate of the block to check\n\t * @param {Integer} posY\tCoordinate of the block to check\n\t * @param {Integer} posZ\tCoordinate of the block to check\n\t */\n\tproto.rotateBlock = function(world, posX, posY, posZ) {\n\t\t\n\t}\n\t\n\t/**\n\t * Used by pistons to see whether or not a block can be moved:\n\t */\n\tproto.getMobilityFlag = function() {\n\t\treturn this.blockMaterial.mobilityFlag;\n\t}\n\t\n\t/**\n\t * Retrieves a block name based on the kind of block.\n\t * \n\t * Simulator only, not in Minecraft.\n\t * \n\t * If block's name varies based on their metadata, like with wool, then\n\t * that block should override this method.\n\t * \n\t * @param \t{Integer} \tblockMetadata\tSo that if the name changes based on metadata, then the method can take it into account \n\t * @return\t{String}\n\t */\n\tproto.getBlockName = function(blockMetadata) {\n\t\treturn \"tile.\" + this.blockName + \".name\";\n\t}\n\t\n\t/**\n\t * Used by the gui to get a list of what kind of placeable blocktypes are offered.\n\t * \n\t * Simulator only, not in Minecraft.\n\t * \n\t * Certain blocks, like cloth, can offer multiple different kinds of coloured wool,\n\t * so would need to override this method.\n\n\t * @param\t{Object}\tlocalization\tLocalization object\n\t * @return\t{Object}\n\t */\n\tproto.enumeratePlaceableBlocks = function() {\n\t\treturn new Array(\n\t\t\t{\n\t\t\t\tblockID: this.blockID,\n\t\t\t\tblockMetadata: 0,\n\t\t\t\tblockType: this.blockType,\n\t\t\t\tblockName: this.getBlockName(0),\n\t\t\t\tmaterial: this.material\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t * Used to draw icons on a canvas. \n\t * \n\t * Simulator only, not in Minecraft.\n\t * \n\t * Creates a world just big enough to hold enough blocks to draw an icon for the kind of block.\n\t * If  the type of block, for example redstone wire, needs other blocks around it to generate\n\t * the desired preview icon, then it should override this method.\n\t * \n\t * @param\t{Object}\tblockObj\t\tContaining all the block types\n\t * @param\t{Object}\tcanvas\t\t\tThe canvas element to draw to\n\t * @param\t{Object}\tblockMetadata\tMetadata of the block for generating the icon\n\t */\n\tproto.drawIcon = function(blockObj, canvas, blockMetadata) {\n\t\tif (blockMetadata == 0) {\n\t\t\tblockMetadata = this.drawIconBlockMetadataOveride;\n\t\t}\n\t\t\n\t\tvar worldData = new com.mordritch.mcSim.World_Schematic(null, 1, 1, 1);\n\t\tworldData.setBlockAndMetadata(0, 0, 0, this.blockID, blockMetadata);\n\t\t\n\t\tvar world = new com.mordritch.mcSim.World(blockObj, worldData);\n\t\tthis.drawTopView_currentLayer(world, 0, 0, 0, canvas);\n\t}\n\t\n\t/**\n\t * A helper utility function for draw methods of blocks, used by simulator only, not the game\n\t */\n\tproto.rotateContext = function(amount, context) {\n\t\tswitch (amount) {\n\t\t\tcase 0:\n\t\t\t\treturn;\n\t\t\tcase 90:\n\t\t\t\tcontext.translate(8, 0);\n\t\t\t\tcontext.rotate(Math.PI*0.5);\n\t\t\t\treturn;\n\t\t\tcase 180:\n\t\t\t\tcontext.translate(8, 8);\n\t\t\t\tcontext.rotate(Math.PI*1.0);\n\t\t\t\treturn;\n\t\t\tcase 270:\n\t\t\t\tcontext.translate(0, 8);\n\t\t\t\tcontext.rotate(Math.PI*1.5);\n\t\t\t\treturn;\n\t\t}\n\t}\n\t\n\tproto.mirrorContext = function(context) {\n\t\tcontext.translate(8, 0);\n\t\tcontext.scale(-1, 1);\n\t}\n\t\n\tproto.flipContext = function(context) {\n\t\tcontext.translate(0, 8);\n\t\tcontext.scale(1, -1);\n\t}\n}());\n"]],"start1":0,"start2":0,"length1":0,"length2":18231}]],"length":18231}
{"contributors":[],"silentsave":true,"ts":1370048978459,"patch":[[{"diffs":[[0,"nction()"],[-1," "],[0,"{};\n\tvar"]],"start1":116,"start2":116,"length1":17,"length2":16}]],"length":18230,"saved":false}
{"contributors":[],"silentsave":true,"ts":1371403856312,"patch":[[{"diffs":[[0,"fault\";\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\tnamesp"]],"start1":81,"start2":81,"length1":17,"length2":16},{"diffs":[[0,"l = \"\";\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t/**\n\t "]],"start1":186,"start2":186,"length1":17,"length2":16},{"diffs":[[0,"e object"],[-1," "],[0,"\n\t *"],[-1," "],[0,"\n\t * Bec"]],"start1":270,"start2":270,"length1":22,"length2":20},{"diffs":[[0,"ck type.\n\t *"],[-1," "],[0,"\n\t * @param "]],"start1":462,"start2":462,"length1":25,"length2":24},{"diffs":[[0,"lockType"],[-1," "],[0,"\n\t */\n\tp"]],"start1":496,"start2":496,"length1":17,"length2":16},{"diffs":[[0,"alue"],[-1," \n\t\t"],[1,"\n"],[0,"\n\t\tt"]],"start1":924,"start2":924,"length1":12,"length2":9},{"diffs":[[0,"ckName;\n"],[-1,"\t\t"],[0,""],[1,""],[0,"\n\t\tthis."]],"start1":1070,"start2":1070,"length1":18,"length2":16},{"diffs":[[0,"ue;\n"],[-1,"\t\t"],[0,"\n\t\tif ("],[-1,"typeof "],[0,"bloc"]],"start1":1138,"start2":1138,"length1":24,"length2":15},{"diffs":[[0,"tion.material !="],[1,"="],[0," "],[-1,"\""],[0,"undefined\") {\n\t\t"]],"start1":1160,"start2":1160,"length1":34,"length2":34},{"diffs":[[0,"al !== undefined"],[-1,"\") {"],[1,")"],[0,"\n\t\t\tthis.setBloc"]],"start1":1171,"start2":1171,"length1":36,"length2":33},{"diffs":[[0,"erial);\n"],[-1,"\t\t}\n"],[0,"\t\telse i"]],"start1":1233,"start2":1233,"length1":20,"length2":16},{"diffs":[[0,"if ("],[-1,"typeof "],[0,"this"]],"start1":1248,"start2":1248,"length1":15,"length2":8},{"diffs":[[0,"erial !="],[1,"="],[0," "],[-1,"\""],[0,"undefine"]],"start1":1260,"start2":1260,"length1":18,"length2":18},{"diffs":[[0,"ined"],[-1,"\") {"],[1,")"],[0,"\n\t\t\t"]],"start1":1275,"start2":1275,"length1":12,"length2":9},{"diffs":[[0,"erial);\n"],[-1,"\t\t}\n\t\t"],[0,""],[1,""],[0,"\n\t\tthis."]],"start1":1314,"start2":1314,"length1":22,"length2":16},{"diffs":[[0," Block);\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\tproto.setB"]],"start1":1376,"start2":1376,"length1":25,"length2":24},{"diffs":[[0,"terial];\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\tproto.rend"]],"start1":1480,"start2":1480,"length1":25,"length2":24},{"diffs":[[0,"alBlock;\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t/**\n\t * Wh"]],"start1":1562,"start2":1562,"length1":25,"length2":24},{"diffs":[[0,"ta here."],[-1," "],[0,""],[1,""],[0,"\n\t */\n\tp"]],"start1":1653,"start2":1653,"length1":17,"length2":16},{"diffs":[[0,"vided.\";\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t/**\n\t * Bl"]],"start1":1758,"start2":1758,"length1":25,"length2":24},{"diffs":[[0,"unction() {\n"],[-1,"\t\t"],[0,""],[1,""],[0,"\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t/**\n\t * Us"]],"start1":1920,"start2":1920,"length1":31,"length2":28},{"diffs":[[0,"priately\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * Accepts"]],"start1":2061,"start2":2061,"length1":25,"length2":24},{"diffs":[[0,"uld be 3\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * Returns"]],"start1":2213,"start2":2213,"length1":25,"length2":24},{"diffs":[[0,"etadata;\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t/**\n\t * Is"]],"start1":2361,"start2":2361,"length1":25,"length2":24},{"diffs":[[0,"k solid?\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @param "]],"start1":2394,"start2":2394,"length1":25,"length2":24},{"diffs":[[0,"ock to check\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @param {Int"]],"start1":2629,"start2":2629,"length1":33,"length2":32},{"diffs":[[0,"t source\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @return"]],"start1":2701,"start2":2701,"length1":25,"length2":24},{"diffs":[[0,"isSolid;\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t/**\n\t * Ca"]],"start1":2816,"start2":2816,"length1":25,"length2":24},{"diffs":[[0,"ain tick\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @param "]],"start1":2892,"start2":2892,"length1":25,"length2":24},{"diffs":[[0,"ock to check\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @param {Int"]],"start1":3127,"start2":3127,"length1":33,"length2":32},{"diffs":[[0,"craft source\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t */\n\tproto.upd"]],"start1":3195,"start2":3195,"length1":33,"length2":32},{"diffs":[[0,", posY, posZ) {\n"],[-1,"\t\t"],[0,""],[1,""],[0,"\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t/**\n\t * Called"]],"start1":3257,"start2":3257,"length1":39,"length2":36},{"diffs":[[0," by a player\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @param {Obj"]],"start1":3321,"start2":3321,"length1":33,"length2":32},{"diffs":[[0,"ock to check\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @param {Int"]],"start1":3560,"start2":3560,"length1":33,"length2":32},{"diffs":[[0,"craft source\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t */\n\tproto.onB"]],"start1":3628,"start2":3628,"length1":33,"length2":32},{"diffs":[[0,", posY, posZ) {\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t/**\n\t * Called"]],"start1":3704,"start2":3704,"length1":38,"length2":36},{"diffs":[[0," by a player\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @param {Obj"]],"start1":3768,"start2":3768,"length1":33,"length2":32},{"diffs":[[0,"ock to check\n\t *"],[-1," "],[0,"\n\t * @param {Int"]],"start1":4007,"start2":4007,"length1":33,"length2":32},{"diffs":[[0,"he event"],[-1," "],[0,"\n\t *"],[-1," "],[0,"\n\t */\n\tp"]],"start1":4083,"start2":4083,"length1":22,"length2":20},{"diffs":[[0," blockID) {\n"],[-1,"\t\t"],[0,""],[1,""],[0,"\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t/**\n\t * Ca"]],"start1":4165,"start2":4165,"length1":31,"length2":28},{"diffs":[[0," world\"?\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * I am as"]],"start1":4225,"start2":4225,"length1":25,"length2":24},{"diffs":[[0,"d blocks\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @param "]],"start1":4324,"start2":4324,"length1":25,"length2":24},{"diffs":[[0,"ock to check\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t */\n\tproto.onB"]],"start1":4559,"start2":4559,"length1":33,"length2":32},{"diffs":[[0,", posY, posZ) {\n"],[-1,"\t\t"],[0,""],[1,""],[0,"\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t/**\n\t * Checks"]],"start1":4623,"start2":4623,"length1":39,"length2":36},{"diffs":[[0,"rdinates\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @param "]],"start1":4718,"start2":4718,"length1":25,"length2":24},{"diffs":[[0,"ock to check\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t */\n\tproto.can"]],"start1":4953,"start2":4953,"length1":33,"length2":32},{"diffs":[[0,"ksList;\n"],[-1,"        "],[0,""],[1,""],[0,"\n       "]],"start1":5077,"start2":5077,"length1":24,"length2":16},{"diffs":[[0,"ockId =="],[-1,""],[0,""],[1,"="],[0," 0 || bl"]],"start1":5161,"start2":5161,"length1":16,"length2":17},{"diffs":[[0,"Cover();\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t/**\n\t * Us"]],"start1":5218,"start2":5218,"length1":25,"length2":24},{"diffs":[[0,"fferent."],[-1,"  "],[0,""],[1,""],[0,"\n\t */\n\tp"]],"start1":5470,"start2":5470,"length1":18,"length2":16},{"diffs":[[0,"eturn false;\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t/**\n\t * Called"]],"start1":5532,"start2":5532,"length1":33,"length2":32},{"diffs":[[0,"y player\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @param "]],"start1":5627,"start2":5627,"length1":25,"length2":24},{"diffs":[[0,"ock to check\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @param {Int"]],"start1":5862,"start2":5862,"length1":33,"length2":32},{"diffs":[[0,"t source\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t */\n\tproto"]],"start1":5934,"start2":5934,"length1":25,"length2":24},{"diffs":[[0,"posZ) {\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t/**\n\t "]],"start1":6004,"start2":6004,"length1":22,"length2":20},{"diffs":[[0,"ified block.\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @param {Obj"]],"start1":6123,"start2":6123,"length1":33,"length2":32},{"diffs":[[0,"to check\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @param "]],"start1":6366,"start2":6366,"length1":25,"length2":24},{"diffs":[[0,"to test?\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @return"]],"start1":6508,"start2":6508,"length1":25,"length2":24},{"diffs":[[0,", posZ);\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t/**\n\t * Ca"]],"start1":6666,"start2":6666,"length1":25,"length2":24},{"diffs":[[0,"or that.\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @param "]],"start1":6813,"start2":6813,"length1":25,"length2":24},{"diffs":[[0,"to check\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @return"]],"start1":7052,"start2":7052,"length1":25,"length2":24},{"diffs":[[0,"return true;\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t/**\n\t * Event "]],"start1":7155,"start2":7155,"length1":33,"length2":32},{"diffs":[[0,"e block.\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @param "]],"start1":7223,"start2":7223,"length1":25,"length2":24},{"diffs":[[0,"ock to check\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t */\n\tproto.blo"]],"start1":7458,"start2":7458,"length1":33,"length2":32},{"diffs":[[0,", posY, posZ) {\n"],[-1,"\t\t"],[0,""],[1,""],[0,"\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t/**\n\t * Event "]],"start1":7524,"start2":7524,"length1":39,"length2":36},{"diffs":[[0,"to the world\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @param {Obj"]],"start1":7604,"start2":7604,"length1":33,"length2":32},{"diffs":[[0,"to check\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t */\n\tproto"]],"start1":7847,"start2":7847,"length1":25,"length2":24},{"diffs":[[0,", facing) {\n"],[-1,"\t\t"],[0,""],[1,""],[0,"\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t/**\n\t * Ev"]],"start1":7920,"start2":7920,"length1":31,"length2":28},{"diffs":[[0,"to the world\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @param {Obj"]],"start1":7996,"start2":7996,"length1":33,"length2":32},{"diffs":[[0,"re checking?\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @return {Bo"]],"start1":8329,"start2":8329,"length1":33,"length2":32},{"diffs":[[0,"urn false;\n\t}\n\t\n"],[1,"\tpr\n\n"],[0,"\t/**\n\t * Can pro"]],"start1":8436,"start2":8436,"length1":32,"length2":37},{"diffs":[[0,"de power\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * Perhaps"]],"start1":8475,"start2":8475,"length1":25,"length2":24},{"diffs":[[0,"with it?\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @param "]],"start1":8542,"start2":8542,"length1":25,"length2":24},{"diffs":[[0,"eturn false;\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t/**\n\t * Event "]],"start1":8881,"start2":8881,"length1":33,"length2":32},{"diffs":[[0,"he world\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @param "]],"start1":8961,"start2":8961,"length1":25,"length2":24},{"diffs":[[0,"re checking?\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @return {Bo"]],"start1":9290,"start2":9290,"length1":33,"length2":32},{"diffs":[[0,"n false;\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t/**\n\t * Un"]],"start1":9409,"start2":9409,"length1":25,"length2":24},{"diffs":[[0,"ionality\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * Guessin"]],"start1":9444,"start2":9444,"length1":25,"length2":24},{"diffs":[[0,"removed.\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @param "]],"start1":9571,"start2":9571,"length1":25,"length2":24},{"diffs":[[0,"hecking?\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @return"]],"start1":9904,"start2":9904,"length1":25,"length2":24},{"diffs":[[0,"rn true;\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t/**\n\t * Se"]],"start1":10008,"start2":10008,"length1":25,"length2":24},{"diffs":[[0," pistons\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * Note su"]],"start1":10073,"start2":10073,"length1":25,"length2":24},{"diffs":[[0," though.\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @param "]],"start1":10131,"start2":10131,"length1":25,"length2":24},{"diffs":[[0,"urcecode"],[-1," "],[0,""],[1,""],[0,"\n\t * @pa"]],"start1":10443,"start2":10443,"length1":17,"length2":16},{"diffs":[[0,"urcecode\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t */\n\tproto"]],"start1":10516,"start2":10516,"length1":25,"length2":24},{"diffs":[[0,"posZ) {\n"],[-1,"\t\t"],[0,""],[1,""],[0,"\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\tproto."]],"start1":10581,"start2":10581,"length1":23,"length2":20},{"diffs":[[0,"rgb(255,"],[1," "],[0,"0,"],[1," "],[0,"0)\";\n\t\tv"]],"start1":10843,"start2":10843,"length1":18,"length2":20},{"diffs":[[0,"255,"],[1," "],[0,"255,"],[1," "],[0,"255)\";\n"],[-1,"\t"],[0,"\n\t\tc"]],"start1":10884,"start2":10884,"length1":20,"length2":21},{"diffs":[[0,"t(0,"],[1," "],[0,"0,"],[1," "],[0,"8,"],[1," "],[0,"8);\n"],[-1,"\t\t"],[0,"\n\t\tc"]],"start1":10951,"start2":10951,"length1":18,"length2":19},{"diffs":[[0,"ont = \"bold "],[-1,"\" + (8) + \""],[1,"8"],[0,"px arial\";\n\t"]],"start1":11076,"start2":11076,"length1":35,"length2":25},{"diffs":[[0,"D, 4, 4, 6);\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\tproto.drawSide"]],"start1":11129,"start2":11129,"length1":33,"length2":32},{"diffs":[[0,"= \"rgba(128,"],[1," "],[0,"128,"],[1," "],[0,"128,"],[1," "],[0,"0.5)\";\n\t\t\tca"]],"start1":11307,"start2":11307,"length1":32,"length2":35},{"diffs":[[0,"return;\n\t\t}\n"],[-1,"\t\t"],[0,""],[1,""],[0,"\n\t\t//TODO: H"]],"start1":11372,"start2":11372,"length1":26,"length2":24},{"diffs":[[0,"implemented?\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\tproto.drawTopV"]],"start1":11406,"start2":11406,"length1":33,"length2":32},{"diffs":[[0,"rn;\n\t\t}\n"],[-1,"\t\t"],[0,""],[1,""],[0,"\n\t\t//Dra"]],"start1":11629,"start2":11629,"length1":18,"length2":16},{"diffs":[[0," \"rgb(0,"],[1," "],[0,"255,"],[1," "],[0,"0)\";\n\t\tv"]],"start1":11801,"start2":11801,"length1":20,"length2":22},{"diffs":[[0,"b(0,"],[1," "],[0,"0,"],[1," "],[0,"0)\";\n"],[-1,"\t\t"],[0,"\n\t\tc"]],"start1":11842,"start2":11842,"length1":17,"length2":17},{"diffs":[[0," 0, "],[-1,"("],[1,"2 * "],[0,"Math.PI"],[-1,"/180)*360"],[0,", fa"]],"start1":11934,"start2":11934,"length1":25,"length2":19},{"diffs":[[0,"fill();\n"],[-1,"\t\t"],[0,""],[1,""],[0,"\n\t\tcanva"]],"start1":11968,"start2":11968,"length1":18,"length2":16},{"diffs":[[0,"old "],[-1,"\" + (8) + \""],[1,"8"],[0,"px a"]],"start1":12094,"start2":12094,"length1":19,"length2":9},{"diffs":[[0,", 4, 6);\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\tproto.draw"]],"start1":12134,"start2":12134,"length1":25,"length2":24},{"diffs":[[0,"= \"rgba(128,"],[1," "],[0,"128,"],[1," "],[0,"128,"],[1," "],[0,"0.5)\";\n\t\t\tca"]],"start1":12294,"start2":12294,"length1":32,"length2":35},{"diffs":[[0,"emented?\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\tproto.getN"]],"start1":12397,"start2":12397,"length1":25,"length2":24},{"diffs":[[0,"255,"],[1," "],[0,"255,"],[1," "],[0,"0];\n\t}"],[-1," \n\t"],[1,"\n"],[0,"\n\tpr"]],"start1":12462,"start2":12462,"length1":21,"length2":21},{"diffs":[[0,"255,"],[1," "],[0,"255,"],[1," "],[0,"0];\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\tpr"]],"start1":12542,"start2":12542,"length1":20,"length2":21},{"diffs":[[0," = [128,"],[1," "],[0,"128,"],[1," "],[0,"128];\n\t\t"]],"start1":12735,"start2":12735,"length1":20,"length2":22},{"diffs":[[0,"hadowed)"],[-1," {"],[0,"\n\t\t\tfor "]],"start1":12781,"start2":12781,"length1":18,"length2":16},{"diffs":[[0,"\t\tfor (var i"],[-1,"="],[1," = "],[0,"0; i"],[-1,"<"],[1," < "],[0,"3; i++)"],[-1," {"],[0,"\n\t\t\t\trgbColo"]],"start1":12791,"start2":12791,"length1":39,"length2":41},{"diffs":[[0,"unt\n"],[-1,"\t\t\t}\n\t\t}\n"],[0,"\t\tca"]],"start1":13007,"start2":13007,"length1":17,"length2":8},{"diffs":[[0,"llStyle = \"rgb(\""],[-1,"+"],[1," + "],[0,"rgbColour[0]+\",\""]],"start1":13022,"start2":13022,"length1":33,"length2":35},{"diffs":[[0,"\" + rgbColour[0]"],[-1,"+\",\"+"],[1," + \", \" + "],[0,"rgbColour[1]+\",\""]],"start1":13037,"start2":13037,"length1":37,"length2":42},{"diffs":[[0,"\" + rgbColour[1]"],[-1,"+\",\"+"],[1," + \", \" + "],[0,"rgbColour[2]+\")\""]],"start1":13059,"start2":13059,"length1":37,"length2":42},{"diffs":[[0,"\" + rgbColour[2]"],[-1,"+"],[1," + "],[0,"\")\";\n\t\tcanvas.fi"]],"start1":13081,"start2":13081,"length1":33,"length2":35},{"diffs":[[0,"0, 0, 8, 8);\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\tproto.drawNorm"]],"start1":13123,"start2":13123,"length1":33,"length2":32},{"diffs":[[0," = [255,"],[1," "],[0,"255,"],[1," "],[0,"255];\n\t\t"]],"start1":13318,"start2":13318,"length1":20,"length2":22},{"diffs":[[0,"ar i"],[-1,"="],[1," = "],[0,"0; i"],[-1,"<"],[1," < "],[0,"3; i++)"],[-1," {"],[0,"\n\t\t\t"]],"start1":13346,"start2":13346,"length1":23,"length2":25},{"diffs":[[0,"-amount\n"],[-1,"\t\t}\n"],[0,"\t\tcanvas"]],"start1":13546,"start2":13546,"length1":20,"length2":16},{"diffs":[[0,"llStyle = \"rgb(\""],[-1,"+"],[1," + "],[0,"rgbColour[0]+\",\""]],"start1":13565,"start2":13565,"length1":33,"length2":35},{"diffs":[[0,"\" + rgbColour[0]"],[-1,"+\",\"+"],[1," + \",\" + "],[0,"rgbColour[1]+\",\""]],"start1":13580,"start2":13580,"length1":37,"length2":41},{"diffs":[[0,"\" + rgbColour[1]"],[-1,"+\",\"+"],[1," + \",\" + "],[0,"rgbColour[2]+\")\""]],"start1":13601,"start2":13601,"length1":37,"length2":41},{"diffs":[[0,"rgbColour[2]"],[-1,"+"],[1," + "],[0,"\")\";\n\t\tcanva"]],"start1":13626,"start2":13626,"length1":25,"length2":27},{"diffs":[[0,"0, 0, 8, 8);\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\tproto.drawTopV"]],"start1":13664,"start2":13664,"length1":33,"length2":32},{"diffs":[[0," (forAboveLayer)"],[-1," {"],[0,"\n\t\t\tcanvas.fillS"]],"start1":13780,"start2":13780,"length1":34,"length2":32},{"diffs":[[0,"gba(128,"],[1," "],[0,"128,"],[1," "],[0,"128,"],[1," "],[0,"0.5)\";\n"],[-1,"\t\t}\n"],[0,"\t\telse {"]],"start1":13821,"start2":13821,"length1":35,"length2":34},{"diffs":[[0,"llStyle = \"rgb(\""],[-1,"+"],[1," + "],[0,"rgbColour[0]+\",\""]],"start1":13946,"start2":13946,"length1":33,"length2":35},{"diffs":[[0,"\" + rgbColour[0]"],[-1,"+\",\"+"],[1," + \",\" + "],[0,"rgbColour[1]+\",\""]],"start1":13961,"start2":13961,"length1":37,"length2":41},{"diffs":[[0,"\" + rgbColour[1]"],[-1,"+\",\"+"],[1," + \",\" + "],[0,"rgbColour[2]+\")\""]],"start1":13982,"start2":13982,"length1":37,"length2":41},{"diffs":[[0,"\" + rgbColour[2]"],[-1,"+"],[1," + "],[0,"\")\";\n\t\t}\n\t\tcanva"]],"start1":14003,"start2":14003,"length1":33,"length2":35},{"diffs":[[0,", 8, 8);\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\tproto.draw"]],"start1":14053,"start2":14053,"length1":25,"length2":24},{"diffs":[[0,"veLayer)"],[-1," {"],[0,"\n\t\t\tcanv"]],"start1":14174,"start2":14174,"length1":18,"length2":16},{"diffs":[[0,"128,"],[1," "],[0,"128,"],[1," "],[0,"128,"],[1," "],[0,"0.5)\";\n"],[-1,"\t\t}\n"],[0,"\t\tel"]],"start1":14211,"start2":14211,"length1":27,"length2":26},{"diffs":[[0,"= \"rgb(\""],[-1,"+"],[1," + "],[0,"rgbColou"]],"start1":14340,"start2":14340,"length1":17,"length2":19},{"diffs":[[0,"olour[0]"],[-1,"+\",\"+"],[1," + \",\" + "],[0,"rgbColou"]],"start1":14355,"start2":14355,"length1":21,"length2":25},{"diffs":[[0,"r[1]"],[-1,"+\",\"+"],[1," + \",\" + "],[0,"rgbC"]],"start1":14380,"start2":14380,"length1":13,"length2":17},{"diffs":[[0,"olour[2]"],[-1,"+"],[1," + "],[0,"\")\";\n\t\t}"]],"start1":14397,"start2":14397,"length1":17,"length2":19},{"diffs":[[0,", 8, 8);\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t/**\n\t * Ca"]],"start1":14439,"start2":14439,"length1":25,"length2":24},{"diffs":[[0,"in the game.\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @param {Obj"]],"start1":14519,"start2":14519,"length1":33,"length2":32},{"diffs":[[0,", posY, posZ) {\n"],[-1,"\t\t"],[0,""],[1,""],[0,"\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t/**\n\t * Used t"]],"start1":14817,"start2":14817,"length1":39,"length2":36},{"diffs":[[0,"he game.\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @param "]],"start1":14917,"start2":14917,"length1":25,"length2":24},{"diffs":[[0,") {\n"],[-1,"\t\t"],[0,""],[1,""],[0,"\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t/*"]],"start1":15223,"start2":15223,"length1":15,"length2":12},{"diffs":[[0,"ityFlag;\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t/**\n\t * Re"]],"start1":15377,"start2":15377,"length1":25,"length2":24},{"diffs":[[0,"f block.\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * Simulat"]],"start1":15441,"start2":15441,"length1":25,"length2":24},{"diffs":[[0,"necraft.\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * If bloc"]],"start1":15483,"start2":15483,"length1":25,"length2":24},{"diffs":[[0,"this method.\n\t *"],[-1," "],[0,"\n\t * @param \t{In"]],"start1":15600,"start2":15600,"length1":33,"length2":32},{"diffs":[[0,"* @param"],[-1," "],[0,"\t{Intege"]],"start1":15619,"start2":15619,"length1":17,"length2":16},{"diffs":[[0,"Integer}"],[-1," "],[0,"\tblockMe"]],"start1":15629,"start2":15629,"length1":17,"length2":16},{"diffs":[[0," account"],[-1," "],[0,"\n\t * @re"]],"start1":15731,"start2":15731,"length1":17,"length2":16},{"diffs":[[0,"\".name\";\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t/**\n\t * Us"]],"start1":15850,"start2":15850,"length1":25,"length2":24},{"diffs":[[0,"offered.\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * Simulat"]],"start1":15943,"start2":15943,"length1":25,"length2":24},{"diffs":[[0,"necraft.\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * Certain"]],"start1":15985,"start2":15985,"length1":25,"length2":24},{"diffs":[[0,"urn "],[-1,"new Array("],[1,"["],[0,"\n\t\t\t"]],"start1":16258,"start2":16258,"length1":18,"length2":9},{"diffs":[[0,"\n\t\t\t}\n\t\t"],[-1,")"],[1,"]"],[0,";\n\t}\n\n\t/"]],"start1":16413,"start2":16413,"length1":17,"length2":17},{"diffs":[[0," canvas."],[-1," "],[0,"\n\t *"],[-1," "],[0,"\n\t * Sim"]],"start1":16460,"start2":16460,"length1":22,"length2":20},{"diffs":[[0,"necraft.\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * Creates"]],"start1":16502,"start2":16502,"length1":25,"length2":24},{"diffs":[[0,"hod.\n\t *"],[-1," "],[0,""],[1,""],[0,"\n\t * @pa"]],"start1":16769,"start2":16769,"length1":17,"length2":16},{"diffs":[[0,"a =="],[1,"="],[0," 0)"],[-1," {"],[0,"\n\t\t\t"]],"start1":17063,"start2":17063,"length1":13,"length2":12},{"diffs":[[0,"veride;\n"],[-1,"\t\t}\n\t\t"],[0,""],[1,""],[0,"\n\t\tvar w"]],"start1":17118,"start2":17118,"length1":22,"length2":16},{"diffs":[[0,"adata);\n"],[-1,"\t\t"],[0,""],[1,""],[0,"\n\t\tvar w"]],"start1":17264,"start2":17264,"length1":18,"length2":16},{"diffs":[[0,"as);\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\t/**\n\t "]],"start1":17391,"start2":17391,"length1":17,"length2":16},{"diffs":[[0,"h.PI"],[-1,"*1.0"],[0,""],[1,""],[0,");\n\t"]],"start1":17749,"start2":17749,"length1":12,"length2":8},{"diffs":[[0,"urn;\n\t\t}\n\t}\n"],[-1,"\t"],[0,""],[1,""],[0,"\n\tproto.mirr"]],"start1":17850,"start2":17850,"length1":25,"length2":24},{"diffs":[[0,"(-1, 1);\n\t}\n"],[-1,"\t"],[0,"\n\tproto.flip"]],"start1":17948,"start2":17948,"length1":25,"length2":24}]],"length":18062,"saved":false}
{"ts":1371403857779,"patch":[[{"diffs":[[0,"\t}\n\t\n\tpr"],[1,"oto.is"],[0,"\n\n\t/**\n\t"]],"start1":8447,"start2":8447,"length1":16,"length2":22}]],"length":18068,"saved":false}
{"ts":1371403859731,"patch":[[{"diffs":[[0,"proto.is"],[1,"Provid"],[0,"\n\n\t/**\n\t"]],"start1":8453,"start2":8453,"length1":16,"length2":22}]],"length":18074,"saved":false}
{"ts":1371403860825,"patch":[[{"diffs":[[0,"isProvid"],[1,"ing"],[0,"\n\n\t/**\n\t"]],"start1":8459,"start2":8459,"length1":16,"length2":19}]],"length":18077,"saved":false}
{"ts":1371403870053,"patch":[[{"diffs":[[0,"roviding"],[1,"WeakPow"],[0,"\n\n\t/**\n\t"]],"start1":8462,"start2":8462,"length1":16,"length2":23}]],"length":18084,"saved":false}
{"ts":1371403871547,"patch":[[{"diffs":[[0,"gWeakPow"],[1,"er"],[0,"\n\n\t/**\n\t"]],"start1":8469,"start2":8469,"length1":16,"length2":18}]],"length":18086,"saved":false}
{"ts":1371403891250,"patch":[[{"diffs":[[0,"eakPower"],[1,"(world)"],[0,"\n\n\t/**\n\t"]],"start1":8471,"start2":8471,"length1":16,"length2":23}]],"length":18093,"saved":false}
{"ts":1371403893212,"patch":[[{"diffs":[[0,"er(world"],[1,", "],[0,")\n\n\t/**\n"]],"start1":8477,"start2":8477,"length1":16,"length2":18}]],"length":18095,"saved":false}
{"ts":1371403898588,"patch":[[{"diffs":[[0,"r(world,"],[1," posX, posY, posZ,"],[0," )\n\n\t/**"]],"start1":8478,"start2":8478,"length1":16,"length2":34}]],"length":18113,"saved":false}
{"ts":1371403906644,"patch":[[{"diffs":[[0,", posZ, "],[1,"unknown"],[0,")\n\n\t/**\n"]],"start1":8497,"start2":8497,"length1":16,"length2":23}]],"length":18120,"saved":false}
{"ts":1371403908924,"patch":[[{"diffs":[[0,"unknown)"],[1,"{}"],[0,"\n\n\t/**\n\t"]],"start1":8505,"start2":8505,"length1":16,"length2":18}]],"length":18122,"saved":false}
{"ts":1371403913276,"patch":[[{"diffs":[[0,"eakPower"],[1," = function"],[0,"(world, "]],"start1":8471,"start2":8471,"length1":16,"length2":27}]],"length":18133,"saved":false}
{"ts":1371403914550,"patch":[[{"diffs":[[0,"nknown){"],[1,"\n\t\t\n\t"],[0,"}\n\n\t/**\n"]],"start1":8517,"start2":8517,"length1":16,"length2":21}]],"length":18138,"saved":false}
{"ts":1371403915979,"patch":[[{"diffs":[[0,"own){\n\t\t"],[1,"return 0"],[0,"\n\t}\n\n\t/*"]],"start1":8520,"start2":8520,"length1":16,"length2":24}]],"length":18146,"saved":false}
{"ts":1371403917080,"patch":[[{"diffs":[[0,"return 0"],[1,";"],[0,"\n\t}\n\n\t/*"]],"start1":8528,"start2":8528,"length1":16,"length2":17}]],"length":18147,"saved":false}
{"ts":1371403972547,"patch":[[{"diffs":[[0,"posX, posY, posZ"],[1,", direction"],[0,") {\n\t\treturn fal"]],"start1":8411,"start2":8411,"length1":32,"length2":43}]],"length":18158,"saved":false}
{"ts":1371403985634,"patch":[[{"diffs":[[0,", posZ, "],[-1,"unknow"],[1,"directio"],[0,"n){\n\t\tre"]],"start1":8519,"start2":8519,"length1":22,"length2":24}]],"length":18160,"saved":false}
{"ts":1371405099698,"patch":[[{"diffs":[[0,"return 0;\n\t}"],[1,"\n\t\n\tpr"],[0,"\n\n\t/**\n\t * C"]],"start1":8541,"start2":8541,"length1":24,"length2":30}]],"length":18166,"saved":false}
{"ts":1371405100824,"patch":[[{"diffs":[[0,"\t}\n\t\n\tpr"],[1,"oto."],[0,"\n\n\t/**\n\t"]],"start1":8551,"start2":8551,"length1":16,"length2":20}]],"length":18170,"saved":false}
{"ts":1371405103977,"patch":[[{"diffs":[[0,"\n\tproto."],[1,"isProvidingStr"],[0,"\n\n\t/**\n\t"]],"start1":8555,"start2":8555,"length1":16,"length2":30}]],"length":18184,"saved":false}
{"ts":1371405107311,"patch":[[{"diffs":[[0,"idingStr"],[1,"ongPower = function"],[0,"\n\n\t/**\n\t"]],"start1":8569,"start2":8569,"length1":16,"length2":35}]],"length":18203,"saved":false}
{"ts":1371405109103,"patch":[[{"diffs":[[0,"function"],[1,"(world)"],[0,"\n\n\t/**\n\t"]],"start1":8588,"start2":8588,"length1":16,"length2":23}]],"length":18210,"saved":false}
{"ts":1371405116079,"patch":[[{"diffs":[[0,"on(world"],[1,", po"],[0,")\n\n\t/**\n"]],"start1":8594,"start2":8594,"length1":16,"length2":20}]],"length":18214,"saved":false}
{"ts":1371405118250,"patch":[[{"diffs":[[0,"orld, po"],[1,"sX, "],[0,")\n\n\t/**\n"]],"start1":8598,"start2":8598,"length1":16,"length2":20}]],"length":18218,"saved":false}
{"ts":1371405118628,"patch":[[{"diffs":[[0,"n false;\n\t}\n"],[-1,"\t"],[0,"\n\tproto.isPr"]],"start1":8449,"start2":8449,"length1":25,"length2":24},{"diffs":[[0,"n 0;\n\t}\n"],[-1,"\t"],[0,"\n\tproto."]],"start1":8545,"start2":8545,"length1":17,"length2":16},{"diffs":[[0,", posX, "],[1,"p"],[0,")\n\n\t/**\n"]],"start1":8600,"start2":8600,"length1":16,"length2":17}]],"length":18217,"saved":false}
{"ts":1371405121871,"patch":[[{"diffs":[[0," posX, p"],[1,"osY, posZ"],[0,")\n\n\t/**\n"]],"start1":8601,"start2":8601,"length1":16,"length2":25}]],"length":18226,"saved":false}
{"ts":1371405124415,"patch":[[{"diffs":[[0,"sY, posZ"],[-1,")"],[1,", direction){}"],[0,"\n\n\t/**\n\t"]],"start1":8610,"start2":8610,"length1":17,"length2":30}]],"length":18239,"saved":false}
{"ts":1371405125748,"patch":[[{"diffs":[[0,"ection){"],[1,"\n\t\t\n\t"],[0,"}\n\n\t/**\n"]],"start1":8623,"start2":8623,"length1":16,"length2":21}]],"length":18244,"saved":false}
{"ts":1371405150197,"patch":[[{"diffs":[[0,"ion){\n\t\t"],[1,"return 0;"],[0,"\n\t}\n\n\t/*"]],"start1":8626,"start2":8626,"length1":16,"length2":25}]],"length":18253,"saved":false}
{"ts":1371405222337,"patch":[[{"diffs":[[0,"turn false;\n"],[1,"\t\t\n"],[0,"\t}\n\n\tproto.i"]],"start1":8446,"start2":8446,"length1":24,"length2":27}]],"length":18256,"saved":false}
{"ts":1371405225270,"patch":[[{"diffs":[[0,"alse;\n\t\t"],[1,"console.log()"],[0,"\n\t}\n\n\tpr"]],"start1":8452,"start2":8452,"length1":16,"length2":29}]],"length":18269,"saved":false}
{"ts":1371405232823,"patch":[[{"diffs":[[0,"ole.log("],[1,"\"\""],[0,")\n\t}\n\n\tp"]],"start1":8464,"start2":8464,"length1":16,"length2":18}]],"length":18271,"saved":false}
{"ts":1371405235284,"patch":[[{"diffs":[[0,"le.log(\""],[1,"isPowere"],[0,"\")\n\t}\n\n\t"]],"start1":8465,"start2":8465,"length1":16,"length2":24}]],"length":18279,"saved":false}
{"ts":1371405236122,"patch":[[{"diffs":[[0,"isPowere"],[1,"d"],[0,"\")\n\t}\n\n\t"]],"start1":8473,"start2":8473,"length1":16,"length2":17}]],"length":18280,"saved":false}
{"ts":1371405237890,"patch":[[{"diffs":[[0,"sPowered"],[1,"T"],[0,"\")\n\t}\n\n\t"]],"start1":8474,"start2":8474,"length1":16,"length2":17}]],"length":18281,"saved":false}
{"ts":1371405246350,"patch":[[{"diffs":[[0,"ower"],[-1,"edT"],[1,"ingTo ca"],[0,"\")\n\t"]],"start1":8476,"start2":8476,"length1":11,"length2":16}]],"length":18286,"saved":false}
{"ts":1371405248540,"patch":[[{"diffs":[[0,"ingTo ca"],[1,"lled from "],[0,"\")\n\t}\n\n\t"]],"start1":8480,"start2":8480,"length1":16,"length2":26}]],"length":18296,"saved":false}
{"ts":1371405249773,"patch":[[{"diffs":[[0,"d from \""],[1," + "],[0,")\n\t}\n\n\tp"]],"start1":8491,"start2":8491,"length1":16,"length2":19}]],"length":18299,"saved":false}
{"ts":1371405252468,"patch":[[{"diffs":[[0,"rom \" + "],[1,"arguments.call"],[0,")\n\t}\n\n\tp"]],"start1":8494,"start2":8494,"length1":16,"length2":30}]],"length":18313,"saved":false}
{"ts":1371405253488,"patch":[[{"diffs":[[0,"nts.call"],[1,"ee"],[0,")\n\t}\n\n\tp"]],"start1":8508,"start2":8508,"length1":16,"length2":18}]],"length":18315,"saved":false}
{"ts":1371405255835,"patch":[[{"diffs":[[0,".callee)"],[1,";"],[0,"\n\t}\n\n\tpr"]],"start1":8511,"start2":8511,"length1":16,"length2":17}]],"length":18316,"saved":false}
{"ts":1371405283012,"patch":[[{"diffs":[[0,"tion) {\n"],[-1,"\t\treturn false;\n"],[0,"\t\tconsol"]],"start1":8434,"start2":8434,"length1":32,"length2":16},{"diffs":[[0,"allee);\n"],[1,"\t\treturn false;\n"],[0,"\t}\n\n\tpro"]],"start1":8497,"start2":8497,"length1":16,"length2":32}]],"length":18316,"saved":false}
