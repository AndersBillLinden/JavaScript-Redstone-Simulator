{"ts":1371162365796,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"(function(){\n\tvar namespace = com.mordritch.mcSim;\n\tvar parentFunc = \"BlockType_Block\";\n\tvar funcName = \"BlockType_Button\";\n\t\n\tnamespace[funcName] = function() {};\n\tnamespace[funcName].prototype = new namespace[parentFunc]();\n\tvar proto = namespace[funcName].prototype;\n\t\n\tproto.material = \"circuits\";\n\t\n\tvar\n\t\tFACING_EAST = 1,\n\t\tFACING_WEST = 2,\n\t\tFACING_SOUTH = 3,\n\t\tFACING_NORTH = 4;\n\t\n\tproto.construct = function() {\n\t\tthis.drawIconBlockMetadataOveride = 3;\n\t\tthis._renderAsNormalBlock = false;\n\t\tthis.tickOnLoad = true;\n\t}\n\t\n\tproto.tickRate = function() {\n\t\treturn 20;\n\t}\n\t\n\tproto.canPlaceBlockAt = function(world, posX, posY, posZ)\n\t{\n\t\tif (world.isBlockNormalCube(posX - 1, posY, posZ))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\tif (world.isBlockNormalCube(posX + 1, posY, posZ))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\tif (world.isBlockNormalCube(posX, posY, posZ - 1))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\treturn world.isBlockNormalCube(posX, posY, posZ + 1);\n\t}\n\t\n\tproto.placementIsValid = function(world, posX, posY, posZ, direction) {\n\t\tvar facing = world.getBlockMetadata(posX, posY, posZ) & 7;\n\t\treturn !(\n\t\t\t(!world.isBlockNormalCube(posX - 1, posY, posZ) && facing == 1) ||\n\t\t\t(!world.isBlockNormalCube(posX + 1, posY, posZ) && facing == 2) ||\n\t\t\t(!world.isBlockNormalCube(posX, posY, posZ - 1) && facing == 3) ||\n\t\t\t(!world.isBlockNormalCube(posX, posY, posZ + 1) && facing == 4)\n\t\t);\n\t}\n\n\tproto.rotateSelection = function(blockMetadata, amount) {\n\t\tvar isPressed = blockMetadata & 0x8\n\t\tvar facing = blockMetadata & 0x7;\n\t\tfor (var i=0; i<amount; i++) {\n\t\t\tfacing = new Array(0, 3, 4, 2, 1)[facing];\n\t\t}\n\t\treturn facing | isPressed;\n\t}\n\t\n\tproto.rotateBlock = function(world, posX, posY, posZ) {\n\t\tvar facing = world.getBlockMetadata(posX, posY, posZ) & 7;\n\t\tconsole.log(\"rotatating.\");\n\t\tdo {\n\t\t\tfacing = new Array(0, 3, 4, 2, 1)[facing];\n\t\t\tworld.setBlockMetadataWithNotify(posX, posY, posZ, facing);\n\t\t\tif (this.placementIsValid(world, posX, posY, posZ)) {\n\t\t\t\tbreak;\n\t\t\t}\t\t\t\n\t\t} while (true);\n\t}\n\t\n\t/**\n\t * For buttons, we should need to see if the button needs to be destroyed if the block it was resting on is now gone. \n\t */\n\tproto.onNeighborBlockChange = function(world, posX, posY, posZ, direction) {\n\t\tif (this.redundantCanPlaceBlockAt(world, posX, posY, posZ))\n\t\t{\n\t\t\tif (!this.placementIsValid(world, posX, posY, posZ, direction)) {\n\t\t\t\t//dropBlockAsItem(world, posX, posY, posZ, world.getBlockMetadata(posX, posY, posZ), 0);\n\t\t\t\tworld.setBlockWithNotify(posX, posY, posZ, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tproto.onBlockPlaced = function(world, posX, posY, posZ, facing) {\n\t\t/*\n\t\t//Original function as per source:\n        int i = par1World.getBlockMetadata(par2, par3, par4);\n        int j = i & 8;\n        i &= 7;\n\n        if (par5 == 2 && par1World.isBlockNormalCube(par2, par3, par4 + 1))\n        {\n            i = 4;\n        }\n        else if (par5 == 3 && par1World.isBlockNormalCube(par2, par3, par4 - 1))\n        {\n            i = 3;\n        }\n        else if (par5 == 4 && par1World.isBlockNormalCube(par2 + 1, par3, par4))\n        {\n            i = 2;\n        }\n        else if (par5 == 5 && par1World.isBlockNormalCube(par2 - 1, par3, par4))\n        {\n            i = 1;\n        }\n        else\n        {\n            i = getOrientation(par1World, par2, par3, par4);\n        }\n\n        par1World.setBlockMetadataWithNotify(par2, par3, par4, i + j);\n\t\t*/\n\t\tvar blockMetadata;\n\t\t\n\t\tif (world.isBlockNormalCubeDefault(posX, posY, posZ + 1, true))\n\t\t{\n\t\t\tblockMetadata = FACING_NORTH;\n\t\t\tworld.setBlockMetadataWithNotify(posX, posY, posZ, blockMetadata);\n\t\t\treturn;\n\t\t}\n\n\t\tif (world.isBlockNormalCubeDefault(posX + 1, posY, posZ, true))\n\t\t{\n\t\t\tblockMetadata = FACING_WEST;\n\t\t\tworld.setBlockMetadataWithNotify(posX, posY, posZ, blockMetadata);\n\t\t\treturn;\n\t\t}\n\n\t\tif (world.isBlockNormalCubeDefault(posX, posY, posZ - 1, true))\n\t\t{\n\t\t\tblockMetadata = FACING_SOUTH;\n\t\t\tworld.setBlockMetadataWithNotify(posX, posY, posZ, blockMetadata);\n\t\t\treturn;\n\t\t}\n\n\t\tif (world.isBlockNormalCubeDefault(posX - 1, posY, posZ, true))\n\t\t{\n\t\t\tblockMetadata = FACING_EAST;\n\t\t\tworld.setBlockMetadataWithNotify(posX, posY, posZ, blockMetadata);\n\t\t\treturn;\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * The MCP variable name\n\t */\n\tproto.redundantCanPlaceBlockAt = function(world, posX, posY, posZ)\n\t{\n\t\tif (!this.canPlaceBlockAt(world, posX, posY, posZ))\n\t\t{\n\t\t\t//dropBlockAsItem(world, posX, posY, posZ, world.getBlockMetadata(posX, posY, posZ), 0);\n\t\t\tworld.setBlockWithNotify(posX, posY, posZ, 0);\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tproto.blockActivated = function(world, posX, posY, posZ)\n\t{\n\t\tvar blockID = this.blockID;\n\t\t\n\t\tvar blockMetadata = world.getBlockMetadata(posX, posY, posZ);\n\t\tvar orientation = blockMetadata & 7;\n\t\tvar isPressed = 8 - (blockMetadata & 8);\n\t\tif (isPressed == 0)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\tworld.setBlockMetadataWithNotify(posX, posY, posZ, orientation + isPressed);\n\t\tworld.markBlocksDirty(posX, posY, posZ, posX, posY, posZ);\n\t\t//world.playSoundEffect((double)posX + 0.5D, (double)posY + 0.5D, (double)posZ + 0.5D, \"random.click\", 0.3F, 0.6F);\n\t\tworld.notifyBlocksOfNeighborChange(posX, posY, posZ, blockID);\n\t\tif (orientation == 1)\n\t\t{\n\t\t\tworld.notifyBlocksOfNeighborChange(posX - 1, posY, posZ, blockID);\n\t\t}\n\t\telse if (orientation == 2)\n\t\t{\n\t\t\tworld.notifyBlocksOfNeighborChange(posX + 1, posY, posZ, blockID);\n\t\t}\n\t\telse if (orientation == 3)\n\t\t{\n\t\t\tworld.notifyBlocksOfNeighborChange(posX, posY, posZ - 1, blockID);\n\t\t}\n\t\telse if (orientation == 4)\n\t\t{\n\t\t\tworld.notifyBlocksOfNeighborChange(posX, posY, posZ + 1, blockID);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tworld.notifyBlocksOfNeighborChange(posX, posY - 1, posZ, blockID);\n\t\t}\n\t\tworld.scheduleBlockUpdate(posX, posY, posZ, blockID, this.tickRate());\n\t\treturn true;\n\t}\n\t\n\tproto.toggleBlock = function(world, posX, posY, posZ) {\n\t\tthis.blockActivated(world, posX, posY, posZ);\n\t}\n\n\tproto.isPoweringTo = function(world, posX, posY, posZ, direction)\n\t{\n\t\treturn (world.getBlockMetadata(posX, posY, posZ) & 8) > 0;\n\t}\n\t\n\tproto.isIndirectlyPoweringTo = function(world, posX, posY, posZ, direction)\n\t{\n\t\tvar blockMetadata = world.getBlockMetadata(posX, posY, posZ);\n\t\tif ((blockMetadata & 8) == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tvar orientation = blockMetadata & 7;\n\t\tif (orientation == 5 && direction == 1)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\tif (orientation == 4 && direction == 2)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\tif (orientation == 3 && direction == 3)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\tif (orientation == 2 && direction == 4)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\treturn orientation == 1 && direction == 5;\n\t}\n\t\n\tproto.canProvidePower = function() {\n\t\treturn true;\n\t}\n\t\n\tproto.updateTick = function(world, posX, posY, posZ)\n\t{\n\t\tif (world.isRemote)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar blockID = this.blockID;\n\t\tvar blockMetadata = world.getBlockMetadata(posX, posY, posZ);\n\t\tif ((blockMetadata & 8) == 0)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tworld.setBlockMetadataWithNotify(posX, posY, posZ, blockMetadata & 7);\n\t\tworld.notifyBlocksOfNeighborChange(posX, posY, posZ, blockID);\n\t\tvar orientation = blockMetadata & 7;\n\t\tif (orientation == 1)\n\t\t{\n\t\t\tworld.notifyBlocksOfNeighborChange(posX - 1, posY, posZ, blockID);\n\t\t}\n\t\telse if (orientation == 2)\n\t\t{\n\t\t\tworld.notifyBlocksOfNeighborChange(posX + 1, posY, posZ, blockID);\n\t\t}\n\t\telse if (orientation == 3)\n\t\t{\n\t\t\tworld.notifyBlocksOfNeighborChange(posX, posY, posZ - 1, blockID);\n\t\t}\n\t\telse if (orientation == 4)\n\t\t{\n\t\t\tworld.notifyBlocksOfNeighborChange(posX, posY, posZ + 1, blockID);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tworld.notifyBlocksOfNeighborChange(posX, posY - 1, posZ, blockID);\n\t\t}\n\t\t//world.playSoundEffect((double)posX + 0.5D, (double)posY + 0.5D, (double)posZ + 0.5D, \"random.click\", 0.3F, 0.5F);\n\t\tworld.markBlocksDirty(posX, posY, posZ, posX, posY, posZ);\n\t}\n\t\n\tproto.drawTopView_currentLayer = function(world, posX, posY, posZ, canvas) {\n\t\tthis.drawTopView_generic(world, posX, posY, posZ, canvas, false);\n\t}\n\n\tproto.drawTopView_aboveLayer = function(world, posX, posY, posZ, canvas) {\n\t\tthis.drawTopView_generic(world, posX, posY, posZ, canvas, true);\n\t}\n\n\t/**\n\t * @param forAboveLayer\tIt's faded when drawing for the above layer\n\t */\n\tproto.drawTopView_generic = function(world, posX, posY, posZ, canvas, forAboveLayer) {\n\t\tvar orientation = world.getBlockMetadata(posX, posY, posZ) & 0x7;\n\t\t/*\n\t\t0x1: Facing east\n\t\t0x2: Facing west\n\t\t0x3: Facing south\n\t\t0x4: Facing north\n\t\t*/\n\t\t\n\t\tswitch (orientation) {\n\t\t\tcase 1:\n\t\t\t\tthis.draw(world, posX, posY, posZ, canvas, \"right\", forAboveLayer);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tthis.draw(world, posX, posY, posZ, canvas, \"left\", forAboveLayer);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tthis.draw(world, posX, posY, posZ, canvas, \"down\", forAboveLayer);\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tthis.draw(world, posX, posY, posZ, canvas, \"up\", forAboveLayer);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tproto.drawSideView_currentLayer = function(world, posX, posY, posZ, canvas, lookingTowards) {\n\t\tthis.drawSideView_generic(world, posX, posY, posZ, canvas, lookingTowards, false);\n\t}\n\n\tproto.drawSideView_aboveLayer = function(world, posX, posY, posZ, canvas, lookingTowards) {\n\t\tthis.drawSideView_generic(world, posX, posY, posZ, canvas, lookingTowards, true);\n\t}\n\t\n\tproto.drawSideView_generic = function(world, posX, posY, posZ, canvas, lookingTowards, forAboveLayer) {\n\t\tvar orientation = world.getBlockMetadata(posX, posY, posZ) & 0x7;\n\t\t/*\n\t\t0x1: Facing east\n\t\t0x2: Facing west\n\t\t0x3: Facing south\n\t\t0x4: Facing north\n\t\t*/\n\t\t\n\t\tvar\n\t\t\tLOOKING_TOWARDS_NORTH = 0,\n\t\t\tLOOKING_TOWARDS_EAST = 1,\n\t\t\tLOOKING_TOWARDS_SOUTH = 2,\n\t\t\tLOOKING_TOWARDS_WEST = 3,\n\t\t\tFACING_EAST = 1,\n\t\t\tFACING_WEST = 2,\n\t\t\tFACING_SOUTH = 3,\n\t\t\tFACING_NORTH = 4;\n\t\t\t\n\t\tvar direction;\n\t\t\n\t\tswitch (lookingTowards) {\n\t\t\tcase LOOKING_TOWARDS_SOUTH:\n\t\t\t\tswitch (orientation) {\n\t\t\t\t\tcase FACING_SOUTH:\n\t\t\t\t\t\tdirection = \"away\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FACING_NORTH:\n\t\t\t\t\t\tdirection = \"towards\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FACING_WEST:\n\t\t\t\t\t\tdirection = \"right\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FACING_EAST:\n\t\t\t\t\t\tdirection = \"left\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase LOOKING_TOWARDS_NORTH:\n\t\t\t\tswitch (orientation) {\n\t\t\t\t\tcase FACING_SOUTH:\n\t\t\t\t\t\tdirection = \"towards\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FACING_NORTH:\n\t\t\t\t\t\tdirection = \"away\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FACING_WEST:\n\t\t\t\t\t\tdirection = \"left\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FACING_EAST:\n\t\t\t\t\t\tdirection = \"right\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase LOOKING_TOWARDS_WEST:\n\t\t\t\tswitch (orientation) {\n\t\t\t\t\tcase FACING_SOUTH:\n\t\t\t\t\t\tdirection = \"left\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FACING_NORTH:\n\t\t\t\t\t\tdirection = \"right\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FACING_WEST:\n\t\t\t\t\t\tdirection = \"away\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FACING_EAST:\n\t\t\t\t\t\tdirection = \"towards\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase LOOKING_TOWARDS_EAST:\n\t\t\t\tswitch (orientation) {\n\t\t\t\t\tcase FACING_SOUTH:\n\t\t\t\t\t\tdirection = \"right\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FACING_NORTH:\n\t\t\t\t\t\tdirection = \"left\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FACING_WEST:\n\t\t\t\t\t\tdirection = \"towards\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FACING_EAST:\n\t\t\t\t\t\tdirection = \"away\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\tthis.draw(world, posX, posY, posZ, canvas, direction, forAboveLayer)\n\t}\n\n\tproto.draw = function(world, posX, posY, posZ, canvas, direction, forAboveLayer) {\n\t\tvar isPressed = (world.getBlockMetadata(posX, posY, posZ) & 8) == 0x8;\n\t\t\n\t\tif (isPressed) {\n\t\t\tvar poweredColour = \"255,0,0\";\n\t\t\tvar thickness = 2;\n\t\t}\n\t\telse {\n\t\t\tvar poweredColour = \"128,0,0\";\n\t\t\tvar thickness = 4;\n\t\t}\n\t\t\n\t\tif (forAboveLayer) {\n\t\t\tpoweredColour = \"rgba(128,128,128,0.5)\"; \n\t\t}\n\t\telse {\n\t\t\tpoweredColour = \"rgb(\"+poweredColour+\")\"; \n\t\t}\n\n\t\tcanvas.fillStyle = poweredColour;\n\n\t\tswitch (direction) {\n\t\t\tcase \"left\":\n\t\t\t\tcanvas.fillRect((8-thickness), 1, thickness, 6);\n\t\t\t\tbreak;\n\t\t\tcase \"right\":\n\t\t\t\tcanvas.fillRect(0, 1, thickness, 6);\n\t\t\t\tbreak;\n\t\t\tcase \"up\":\n\t\t\t\tcanvas.fillRect(1, (8-thickness), 6, thickness);\n\t\t\t\tbreak;\n\t\t\tcase \"down\":\n\t\t\t\tcanvas.fillRect(1, 0, 6, thickness);\n\t\t\t\tbreak;\n\t\t\tcase \"towards\":\n\t\t\t\tcanvas.fillRect(1, 2, 6, 4);\n\t\t\t\tbreak;\n\t\t\tcase \"away\":\n\t\t\t\tcanvas.fillRect(1, 2, 6, 4);\n\t\t\t\tcanvas.fillStyle = \"rgb(0,0,0)\";\n\t\t\t\tcanvas.fillRect(2, 2, 4, 4);\n\t\t\t\tbreak;\n\t\t}\n\t}\n}());\n"]],"start1":0,"start2":0,"length1":0,"length2":11981}]],"length":11981}
{"contributors":[],"silentsave":true,"ts":1371162379294,"patch":[[{"diffs":[[0,"osX, posY, posZ)"],[-1,"\n\t"],[1," "],[0,"{\n\t\tif (world.is"]],"start1":621,"start2":621,"length1":34,"length2":33}]],"length":11980,"saved":false}
{"ts":1371162382170,"patch":[[{"diffs":[[0," 1, posY, posZ))"],[-1,"\n\t\t"],[1," "],[0,"{\n\t\t\treturn true"]],"start1":676,"start2":676,"length1":35,"length2":33}]],"length":11978,"saved":false}
{"ts":1371162383685,"patch":[[{"diffs":[[0,"\t\t\treturn true;\n"],[-1,"\t\t}\n"],[0,"\t\tif (world.isBl"]],"start1":695,"start2":695,"length1":36,"length2":32}]],"length":11974,"saved":false}
{"ts":1371162384670,"patch":[[{"diffs":[[0,"posY, posZ))"],[-1," {"],[0,"\n\t\t\treturn t"]],"start1":680,"start2":680,"length1":26,"length2":24}]],"length":11972,"saved":false}
